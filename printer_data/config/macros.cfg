#####################################################################
#   Macros
#####################################################################

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    ##  Uncomment for for your size printer:
    #--------------------------------------------------------------------
    
    ##  Uncomment for 300 build
    #G0 X150 Y150 Z30 F3600
    
    #--------------------------------------------------------------------
    RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro WIPE_LINE]
gcode:
  {% set z = params.Z|default(0.28)|float %}
  {% set n = params.N|default(0.4)|float %}

  {% if printer.toolhead.homed_axes != "xyz" %}
    {action_respond_info("Please home XYZ first")}
  {% elif printer.extruder.temperature < 170 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    SAVE_GCODE_STATE NAME=WIPE_LINE_state
    G1 X2 Y2 Z2 F3000.0
    G1 Z{z} F240
    G92 E0.0
    G1 E10.0 ; Purge Bubble
    # G1 X20 E5 F1500.0; draw short line
    # G1 X77 E18.0 F1500.0;  draw line
    G1 Y77 E18.0 F1500.0; draw y-line
    G92 E0.0
    RESTORE_GCODE_STATE NAME=WIPE_LINE_state MOVE=0
  {% endif %}

[gcode_macro G32]
gcode:
    G28
    status_cleaning
    # clean_nozzle
    status_leveling
    FAST_QGL
    G28 Z    
    ##  Uncomment for 300 build
    G0 X150 Y126.5 Z10 F3600

[gcode_macro BEACON_VARS]
variable_beacon_contact_calibration_temp: 150                           # nozzle temperature for auto calibration
variable_adaptive_mesh: True                                           # REQUIRES zero_reference_position to be setup in [bed_mesh]
# Do not modify below
gcode:

[gcode_macro FAST_QGL]
gcode:
    M117 QUAD_GANTRY_LEVEL
    {% if printer.configfile.settings.quad_gantry_level %}
        {% if printer.quad_gantry_level.applied == False %}
            QUAD_GANTRY_LEVEL RETRY_TOLERANCE=1
        {% endif %}
        QUAD_GANTRY_LEVEL horizontal_move_z=2
    {% endif %} 

[gcode_macro PRINT_START]
gcode:
    # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
    {% set target_bed = params.BED|int %}
    {% set target_extruder = params.EXTRUDER|int %}
    {% set target_chamber = params.CHAMBER|default("50")|int %}
    _SET_MPC_MATERIAL MATERIAL={params.MATERIAL}

    # Collecting variables
    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
    {% if printer.configfile.settings['beacon'].home_z_hop is defined %}
        {% set z_hop = printer.configfile.settings['beacon'].home_z_hop|float %}
        {% set speed = printer.configfile.settings['beacon'].home_xy_move_speed|float %}
        {% set z_hop_speed = printer.configfile.settings['beacon'].home_z_hop_speed|float %}
    {% else %}
        {% set z_hop = printer.configfile.settings['safe_z_home'].home_z_hop|float %}
        {% set speed = printer.configfile.settings['safe_z_home'].home_xy_move_speed|float %}
        {% set z_hop_speed = printer.configfile.settings['safe_z_home'].home_z_hop_speed|float %}
    {% endif %}
    {% set beacon_contact_calibration_temp = printer["gcode_macro BEACON_VARS"].beacon_contact_calibration_temp|default(150)|int %}
    {% set adaptive_meshing = printer["gcode_macro BEACON_VARS"].adaptive_mesh|default(false) %}

    SET_DISPLAY_TEXT MSG="Hotend: {beacon_contact_calibration_temp}c"                           # Displays info
    M109 S{beacon_contact_calibration_temp}                                                     # Heats up the nozzle to contact temps
    
    {% if printer.toolhead.homed_axes != "xy" %}
        G28 XY                                                                                     # Partial home (XY)
    {% else %}
        G1 Z{z_hop} F{z_hop_speed}                                                              # Moves to z_hop height
        G1 X{x_wait} Y{y_wait} F{speed}                                                         # Goes to center of the bed
    {% endif %}
    G90                                                                                         # Absolute positioning

    BED_MESH_CLEAR                                                                              # Clears old saved bed mesh (if any)
    SET_GCODE_OFFSET Z=0                                                                         # Clears current offset

    # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
    {% if params.BED|int > 90 %}
        M106 S255                                                                               # Turns on the Part cooling fans

        {% if printer.configfile.settings["output_pin nevermore"] is defined %}
            SET_PIN PIN=nevermore VALUE=1                                                       # Turns on nevermore if setup
        {% endif %}

        SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"                                               # Displays info
        M190 S{target_bed}                                                                      # Sets the target temp for the bed

        {% if printer.configfile.config["temperature_sensor chamber"] is defined %}
            SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"                                  # Displays info
            TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}       # Waits for chamber to reach desired temp
        {% endif %}

	# If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
    {% else %}
        SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"                                               # Displays info
        M190 S{target_bed}                                                                      # Sets the target temp for the bed

        SET_DISPLAY_TEXT MSG="Soak for 5min"                                                    # Displays info
        G4 P300000                                                                              # Waits 5 min for the bedtemp to stabilize
    {% endif %}
	
	
    # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
    SET_DISPLAY_TEXT MSG="Hotend: {beacon_contact_calibration_temp}c"                           # Displays info
    M109 S{beacon_contact_calibration_temp}                                                     # Heats up the nozzle to contact temps

    # {% if printer.configfile.config["gcode_macro WIPE_NOZZLE"] is defined %}
    #     WIPE_NOZZLE                                                                             # Wipes the nozzle via macro if setup
    # {% endif %}
    
    SET_DISPLAY_TEXT MSG="Hotend: {beacon_contact_calibration_temp}c"                           # Displays info
    M109 S{beacon_contact_calibration_temp}                                                     # Heats up the nozzle to contact temps
    
    # If you don't change build plates then you may remove this by commenting it out
    # G28 Z METHOD=CONTACT CALIBRATE=1                                                            # Calibrate z offset and beacon model hot

    {% if printer.quad_gantry_level is defined and not printer.quad_gantry_level.applied %}
        SET_DISPLAY_TEXT MSG="QGL"                                                              # Displays info
        {% if printer.configfile.config["gcode_macro FAST_QGL"] is defined %}
            {% if printer.configfile.settings['beacon'].default_probe_method != contact %}
                FAST_QGL                                                                        # Levels the buildplate via QGL but FASTER
            {% endif %}
        {% else %}
            quad_gantry_level                                                                   # Levels the buildplate via QGL
        {% endif %}
        G28 Z                                                                                   # Homes Z again after QGL
    {% endif %}

    ##  comment if you want to load a previous mesh
    SET_DISPLAY_TEXT MSG="Bed mesh"                                                             # Displays info
    {% if adaptive_meshing %}
        bed_mesh_calibrate ADAPTIVE=1                                                           # Runs an adaptive bed mesh
    {% else %}
        bed_mesh_calibrate                                                                      # Runs a bed mesh 
    {% endif %}

    # {% if printer.configfile.config["gcode_macro WIPE_NOZZLE"] is defined %}
    #     WIPE_NOZZLE                                                                             # Wipes the nozzle via macro if setup
    # {% endif %}

    SET_DISPLAY_TEXT MSG="Hotend: {beacon_contact_calibration_temp}c"                           # Displays info
    M109 S{beacon_contact_calibration_temp}                                                     # Heats up the nozzle to contact temps
    
    G28 Z METHOD=PROXIMITY CALIBRATE=0                                                            # Calibrate z offset only after tilt/mesh


    # Heats up the nozzle up to target via data from slicer
    SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"                                           # Displays info 
    {% if printer.configfile.config["gcode_macro SMART_PARK"] is defined %}
        SMART_PARK                                                                              # Parks using KAMP
    {% else %}
        G1 Z{z_hop} F{z_hop_speed}                                                              # Moves to z_hop height
        G1 X{x_wait} Y{y_wait} F{speed}                                                         # Goes to center of the bed
    {% endif %}

	M107                                                                                        # Turns off partcooling fan
    M109 S{target_extruder}                                                                     # Heats the nozzle to printing temp
    
    {% if printer.configfile.config["gcode_macro _BEACON_SET_NOZZLE_TEMP_OFFSET"] is defined %}
        _BEACON_SET_NOZZLE_TEMP_OFFSET                                                          # Adds toolhead expansion offset (REQUIRES ADDITIONAL MACROS NOT BY DEFAULT Found at:https://github.com/YanceyA/Beacon_Thermal_Expansion_Compensation )
    {% endif %}

    # SET_GCODE_OFFSET Z_ADJUST=-0.440                                                            # Apply any additional offset u wish to apply

    # ENABLE_FIL_SENSOR
    # Gets ready to print by doing a purge line
    SET_DISPLAY_TEXT MSG="Printer goes brr"                                                     # Displays info
    {% if printer.configfile.config["gcode_macro PURGE_NOZZLE"] is defined %}
        PURGE_NOZZLE                                                                            # Purges the nozzle via macro if setup
    {% elif printer.configfile.config["gcode_macro LINE_PURGE"] is defined %}
        LINE_PURGE                                                                              # Purges the nozzle using KAMP adaptive purging if setup
    {% elif printer.configfile.config["gcode_macro VORON_PURGE"] is defined %}
        VORON_PURGE                                                                             # Purges the nozzle using KAMP adaptive purging if setup
    {% endif %}
    WIPE_LINE
   
    G90   
    
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    LIGHTS_OFF
    DISABLE_FIL_SENSOR
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    {% set z_move = [th.position.z + 40, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    M107                                     ; turn off fan
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 5} F3600  ; park nozzle at rear
    G0 Z{z_move} F480;  move to top of z
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    status_off

[gcode_macro PRINT_END_RETRACT]
#   Use PRINT_END for the slicer ending script with unloading filament- please customise for your slicer of choice
gcode:
    LIGHTS_OFF
    DISABLE_FIL_SENSOR
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    {% set z_move = [th.position.z + 40, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F300                  ; retract filament first move

    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 5} F3600  ; park nozzle at rear
    G0 Z{z_move} F480;  move to top of z
    UNLOAD_FILAMENT
    TURN_OFF_HEATERS
    M107  
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    status_off

[gcode_macro _SET_FAN_SPEED]
gcode:
    M106 S{ (params.PERCENT | float) * 255 / 100 }

[gcode_macro CENTER]
gcode:
    G90
    G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ (printer.toolhead.axis_maximum.y/2)- 23.5 } Z{ printer.toolhead.axis_maximum.z/2 } F7200

[gcode_macro FRONT_CENTER]
gcode:
    G90
    G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_minimum.y+10 } Z{ printer.toolhead.axis_maximum.z/2 } F7200

# Lighting Control
[gcode_macro LIGHTS_OFF]
gcode:
    SET_PIN PIN=caselight VALUE=0
 
[gcode_macro LIGHTS_ON]
gcode:
    SET_PIN PIN=caselight VALUE=1
 
[gcode_macro LIGHTS_TOGGLE]
gcode:
    {% if printer["output_pin caselight"].value == 1 %}
        lights_off
    {% else %}
        lights_on
    {% endif %}

[gcode_macro PREP_PRINT]
description: heats bed, homes and levels gantry
variable_nozzle_temp: 0
gcode:
     {% set NOZZLE = params.NOZZLE | default (150) | float %}
     SET_Z_THERMAL_ADJUST ENABLE=1
     G32
     CENTER
     M104 S{NOZZLE}
     M109 S{NOZZLE}
     G92 E0.0

[gcode_macro HEAT_SOAK]
description: heats the bed and nozzle for a while 

variable_target_temp: 0
variable_nozzle_temp: 0
variable_stage: None ## heating -> soaking -> done -> None
variable_nozzle_stage: None
variable_chamber_temp: 0
variable_chamber_stage: None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    status_heating
    # SET_Z_THERMAL_ADJUST ENABLE=1
    {% set BED = params.BED | default(110) | float %}
    {% set DURATION = (params.DURATION | default(60) | int) * 60 %} ## minutes to seconds
# Added a variable for nozzle - VA
    {% set NOZZLE = params.NOZZLE | default (150) | float %}
    {% set CHAMBER = params.CHAMBER | default (50) | float %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ BED }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0
# Added notes on nozzle
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=nozzle_temp         VALUE={ NOZZLE }
#    SET_GCODE_VARIABLE MACRO=PREP_PRINT VARIABLE=nozzle_temp         VALUE={ NOZZLE }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=nozzle_stage           VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=chamber_temp        VALUE={ CHAMBER }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=chamber_stage       VALUE="'heating'"

    ;; fire up the heaters
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ BED }
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={ NOZZLE }


    ;; run the fan to circulate air
    _SET_FAN_SPEED PERCENT=50

    ;; put the bed and nozzle where they're a safe distance apart
    G28 
    CENTER
    G0 Z2

    M84 ;; turn off steppers

    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[gcode_macro CONTINUE_FROM_HEAT_SOAK]
description: Forces in-progress HEAT_SOAK cycle to done stage
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'done'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
        {% if printer["temperature_sensor chamber_temp"].temperature >= heat_soak.chamber_temp %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
            PREP_PRINT NOZZLE={ heat_soak.nozzle_temp }
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=nozzle_temp         VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  100
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity * 60 %}
    DISABLE_FIL_SENSOR
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity}
    G1 E{purge_distance} F{speed} #purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  125
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity * 60 %}
    DISABLE_FIL_SENSOR
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro BED_MESH]
gcode:
    BED_MESH_CALIBRATE

[gcode_macro ZUP_P001]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.001 MOVE=1

[gcode_macro ZUP_P005]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.005 MOVE=1

[gcode_macro ZDOWN_P001]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.001 MOVE=1

[gcode_macro ZDOWN_P005]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.005 MOVE=1

[gcode_macro ZUP_P01]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.01 MOVE=1

[gcode_macro ZDOWN_P01]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1

[gcode_macro ZUP_P02]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.02 MOVE=1

[gcode_macro ZDOWN_P02]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.02 MOVE=1

[gcode_macro ZUP_P03]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.03 MOVE=1

[gcode_macro ZDOWN_P03]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.03 MOVE=1

[gcode_macro ZUP_P04]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.04 MOVE=1

[gcode_macro ZDOWN_P04]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.04 MOVE=1

[gcode_macro ZUP_P05]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.05 MOVE=1

[gcode_macro ZDOWN_P05]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1

[gcode_macro ZDOWN_P1]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.1 MOVE=1

[gcode_macro ZDOWN_P5]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.5 MOVE=1

[gcode_macro ZUP_P1]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.1 MOVE=1

[gcode_macro ZUP_P5]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.5 MOVE=1

[gcode_macro ZUP_1]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=1.0 MOVE=1

[gcode_macro ZDOWN_1]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-1.0 MOVE=1

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #RESETRGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    # SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro ENABLE_FRAME_COMP]
gcode:
    SET_Z_THERMAL_ADJUST ENABLE=1

[gcode_macro DISABLE_FRAME_COMP]
gcode:
    SET_Z_THERMAL_ADJUST ENABLE=0

[gcode_macro ENABLE_FIL_SENSOR]
gcode:
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1  

[gcode_macro DISABLE_FIL_SENSOR]
gcode:
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro SHUTDOWN]
gcode:
    #LCDRGB R=0 G=0 B=0                               ; Turn off LCD neopixels (see above for this macro)
    #OFF                                              ; Shortcut to turn everything off (see above for this macro)
	{action_call_remote_method("shutdown_machine")}   ; Moonraker compatible host shutdown

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	{% for i in range(iterations) %}
		# Large pattern
			# Diagonals
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			
			# Box
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home and get position again for comparison:
		G28
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

# Park front center
[gcode_macro PARKFRONT]
gcode:
    CG28                              ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000        
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park front center, but low down.
[gcode_macro PARKFRONTLOW]
gcode:
    CG28                             ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park top rear left
[gcode_macro PARKREAR]
gcode:
    CG28                             ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKREAR
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000     
    RESTORE_GCODE_STATE NAME=PARKREAR

# Park at center of build volume
[gcode_macro PARKCENTER]
gcode:
    CG28                              ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000    
    RESTORE_GCODE_STATE NAME=PARKCENTER

# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    CG28                               ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro DUMP_PARAMETERS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

[gcode_macro _AFC_GLOBAL_VARS]
description: Global variables used in multiple macros
gcode: # Leave Empty

# Set this to match your AFC_stepper base naming in AFC_Hardware.cfg
variable_stepper_name             : 'lane'    # [AFC_stepper lane1] [AFC_stepper lane2]...

variable_travel_speed             : 120       # Speed mm/s
variable_z_travel_speed           : 30        # Speed mm/s
variable_accel                    : 2000      # Move accel for all macro moves
variable_verbose                  : 1         # Console Output for macros
                                              #  0 - None
                                              #  1 - Limited
                                              #  2 - All

#--=================================================================================-
#------- Brush ---------------------------------------------------------------------
#--=================================================================================-
[gcode_macro _AFC_BRUSH_VARS]
description: Brush macro configuration variables
gcode: # Leave empty


variable_brush_loc                : 40,303,-1  # Position of the center of the brush (Set z to -1 if you dont want a z move)
variable_brush_clean_speed        : 150       # Speed of cleaning moves when brushing
# Accel of cleaning moves when brushing. This will overwrite the global accel for this macro. Set to 0 to use global accel
variable_brush_clean_accel        : 0
variable_brush_width              : 37        # Total width in mm of the brush in the X direction
variable_brush_depth              : 8        # Total depth in mm of the brush in the Y direction
variable_y_brush                  : True      # True - Brush along Y axis first then X. False - Only brush along x
variable_brush_count              : 4         # Number of passes to make on the brush.

# Move in Z after brush to avoid bed if brush is at Z0 (Set z to -1 if you dont want a z move)
variable_z_move                   : -1

[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c \"$0\""
timeout: 90.0
verbose: True

[gcode_macro WIPE_NOZZLE]
gcode: AFC_BRUSH

[gcode_macro CLEAN_NOZZLE]
gcode: AFC_BRUSH

[gcode_macro QGL]
gcode: QUAD_GANTRY_LEVEL

[gcode_macro M109] # Wait Hotend Temp
rename_existing: M109.1
gcode:
    #Parameters
    {% set s = params.S|float %}

    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  # Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-2} MAXIMUM={s+5}   # Wait for hotend temp (within n degrees)
    {% endif %}


[gcode_macro M190] # Wait Bed Temp
rename_existing: M190.1
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   # Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-2} MAXIMUM={s+5}  # Wait for bed temp (within n degrees)
    {% endif %}

